\\10.3.101.54\\Vincent Letourneau : vincent@nanoninja.comSassmeister -> langage de programmation cssLinuxsudo apt update && sudo apt upgrade -y //mettre à jour softwaressudo apt dist-upgrade //mettre à jour OSpwd => Savoir le chemin de là où on estcd [param] => se déplacer vers param (.. pour repertoire du dessus, rien pour aller à l'utilisateur, - pour repertoire précédent)ls => lister repertoires ou fichier dans l'emplacement où l'on est	-lah => lister en colonnes de manière plus lisible que -l			affiche aussi les fichiers cachés (-a)cat [fichier] => afficher le contenu de fichier!! => commande précédente (ex : sudo !!)mkdir [nom] => créer dossiertouch [nom] => créer un fichierecho [texte] > [fichier] => envoie le texte dans le fichier et le créé si n'existe pas, si du texte existe il sera écraséecho [texte] >> [fichier] => envoie le texte dans le fichier et le créé si n'existe pas, si du texte existe il sera mis à la suite de ce textecat [fichier1] > [fichier2] => met le contenu de fichier1 dans fichier2/dev/null => le néant, peut servir à se débarasser d'erreurs[commande fausse] 2> /dev/null => envoie un code qui devrait donner une erreur dans le néantsi veut générer des logs d'erreurs :[commande fausse] 2>> [nom du fichier de log]grep [chaine de caractères] [fichier] => cherche la chaine de caractères dans le fichiercp [fichier] [chemin] => copie le fichier dans le chemin spécifié, peut renommer en même tempsmv [fichier] [chemin] => déplace le fichier dans le chemin spécifié, peut renommer en même tempsifconfig => voir les infos (ip, mac, etc...)[programme1] | [programme2] => permet de récupérer la sortie du programme1 pour la mettre dans l'entrée du programme2 (pipe)nano [fichier] => éditer un fichier texte, si n'existe pas le créévim [fichier] => même choselsb_release -a => permet de savoir la version de son linuxDocker -> micro-service		-> Système de virtualisation légerinstallation de docker pour ubuntu :https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/changer le path de node :	-> être dans le path de node	-> pwd	-> copier le path	-> export PATH=$PATH:[coller le path]source (ou .) [fichier (exemple .profile)] => permet de recharger un fichier (par exemple .profile se lance au démarrage, permet de prendre en compte les changements sans redémarrer la session)sudo ln -s [chemin de base sans le / de fin] [chemin du raccourci sans le / de fin] => permet de faire un lien symbolique (raccourci)$([commande]) => sous-commandesudo docker rm -f $(sudo docker ps -aq) => kill tous les processus de dockerlancer le chat docker huggy :	sudo docker run --rm --name huggy -p 3000:3000 nanoninja/huggycréer un alias :alias [nomalias]='[commande]'mkdir -p [arborescence avec {chemin1,chemin2}] => créer une arborescence de fichierhomebrew pour l' "apt" de macwatch -n[nb de sec] [commande] => permet de faire la commande demandées toutes les x secondes (x étant le nombre de secondes précisées après le n)sudo useradd [nom utilisateur] => créer un utilisateursudo userdel [nom utilisateur] => supprimer un utilisateursudo useradd -m [nu] => créer un utilisateur et lui créé un dossier homecat /etc/passwdsu [nu] => changer d'utilisateursudo passwd [nu] => changer le mot de passe d'un utilisateurchown [user]:[group] [fichier] => changer les proprios d'un fichiersudo addgroup [nom groupe] => créer un groupe d'usergroups [user] => afficher les groupes d'un usersudo addgroup [user] [nom groupe] => ajouter un user à un groupesudo apt install nginx-full mysql-server php-fpmmysql -uroot -pshow databases;use [database];show tables;exitwhereis [name] => donne les dossiers où se trouve namewhich [name]sudo vim /etc/nginx/sites-available/default#modificationsmkdir -p Workspace/wwwsudo service nginx restartcrontab -e => permet de créer des algos qui se lancent tous les x tempsdans le cron (exemple):	*/2 * * * * echo "Hello Cron" >> /home/kporez/tests/hello.log	rajoute la ligne "Hello Cron" au fichier hello.log toutes les deux minuteslancer un serveur php :	php -t [dossier] -S "[adresse (ex localhost:port)]"php pour hashage :	password_hash	password_verifyecho [texte] | md5sum => hachage de textecrackstation.net @ => permettre de décrypterGITgit config -lgit config --global user.email "vous@exemple.com"git config --global user.name "Votre nom"git config -egit config --global -egit initgit statusgit add [fichier à suivre]git rm --cached [fichier à ne plus suivre]git log => voir historique du versioninggit commit  => valide tous ce qui a été add aux fichiers à suivregit diff [1] [2] => comparer deux commitsgit remote add origin [adresse]git clonegit push -u origin mastergit pull origin masterssh-keygenssh-addcd .ssh/cat id_rsa.pubgit lggit checkout [code du commit] => retourner à l'état d'un commit				master pour retourner à la fingit config --global alias.lg "log --oneline --graph"git branch [nom branche]si vide, voit branches existantesgit merge [branche] => fusionner branchegit tag [numero de version] => donner une version à un codegit push --tags origin masterINSTALLER UN CHAT AVEC NODEbrew install node // installer node si pas présentgit initgit clone https://github.com/socketio/socket.iocd socket.ionpm installcd examples/chatnpm installnpm startle chat est lancé il suffit d'aller sur localhost:3000